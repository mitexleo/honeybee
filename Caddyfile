{$DOMAIN:-localhost} {
    # Automatic HTTPS with Let's Encrypt
    # Caddy will automatically obtain and renew SSL certificates

    # Security headers
    header {
        # Prevent clickjacking
        X-Frame-Options "DENY"

        # Prevent MIME type sniffing
        X-Content-Type-Options "nosniff"

        # Enable XSS protection
        X-XSS-Protection "1; mode=block"

        # Strict referrer policy
        Referrer-Policy "strict-origin-when-cross-origin"

        # Content Security Policy for honeypot
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'; font-src 'self'; object-src 'none'; media-src 'none'; frame-src 'none';"

        # HSTS - Force HTTPS for 1 year
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

        # Permissions policy
        Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()"

        # Remove server information
        -Server
    }



    # Admin routes - stricter rate limiting
    @admin {
        path /admin/* /api/export/* /api/metrics
    }
    handle @admin {
        reverse_proxy honeypot:5000 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Forwarded-Host {host}
        }
    }

    # API routes - moderate rate limiting
    @api {
        path /api/*
    }
    handle @api {
        reverse_proxy honeypot:5000 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Forwarded-Host {host}
        }
    }

    # Static files - serve directly with caching
    @static {
        path *.css *.js *.ico *.png *.jpg *.gif *.svg
    }
    handle @static {
        header Cache-Control "public, max-age=3600"
        reverse_proxy honeypot:5000 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Forwarded-Host {host}
        }
    }

    # All other routes - normal rate limiting
    handle {

        # Reverse proxy to Flask application
        reverse_proxy honeypot:5000 {
            # Forward client information
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Forwarded-Host {host}

            # Health check
            health_uri /health
            health_interval 30s
            health_timeout 10s

            # Fail timeout
            fail_timeout 30s
        }
    }

    # Access logging for security analysis
    log {
        output file /var/log/caddy/honeypot-access.log {
            roll_size 100mb
            roll_keep 10
            roll_keep_for 720h
        }
        format json {
            time_format "2006-01-02T15:04:05.000Z07:00"
            message_key "msg"
            level_key "level"
            time_key "ts"
            logger_key "logger"
            caller_key "caller"
            stacktrace_key "stacktrace"
        }
        level INFO
    }

    # Error page handling
    handle_errors {
        @404 {
            expression {http.error.status_code} == 404
        }
        rewrite @404 /

        @5xx {
            expression {http.error.status_code} >= 500
        }
        respond @5xx "Service temporarily unavailable" 503
    }
}

# Alternative configuration for IP-based access (testing/development)
# Uncomment and modify if you don't have a domain name
# :443 {
#     tls internal
#
#     # Same configuration as above but with self-signed certificates
#     header {
#         X-Frame-Options "DENY"
#         X-Content-Type-Options "nosniff"
#         X-XSS-Protection "1; mode=block"
#         Referrer-Policy "strict-origin-when-cross-origin"
#         Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'; font-src 'self'; object-src 'none'; media-src 'none'; frame-src 'none';"
#         -Server
#     }
#
#     reverse_proxy honeypot:5000 {
#         header_up Host {host}
#         header_up X-Real-IP {remote_host}
#         header_up X-Forwarded-For {remote_host}
#         header_up X-Forwarded-Proto {scheme}
#         header_up X-Forwarded-Host {host}
#     }
#
#     log {
#         output file /var/log/caddy/honeypot-dev.log
#         level INFO
#     }
# }

# Global options
{
    # Email for Let's Encrypt (replace with your email)
    email {$ADMIN_EMAIL:-admin@example.com}

    # Use production Let's Encrypt endpoint
    # acme_ca https://acme-v02.api.letsencrypt.org/directory

    # For testing, use staging endpoint to avoid rate limits
    # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory

    # Security settings
    servers {
        protocols h1 h2 h3
    }

    # Log errors to file
    log {
        output file /var/log/caddy/caddy-error.log
        level WARN
    }
}
